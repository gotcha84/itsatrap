#include <sys/socket.h>#include <netinet/in.h>#include <stdio.h>#include <string.h>#include "packet.h"#define SERVER_PORT 5555#define BUFSIZE 512// Function Prototypesint initialize();void processMsg(char * msg);int recieveMsg(char * msg);int sendMsg(char * msg, int length);// Global Varsstruct 	sockaddr_in myAddress, clientAddress;int 	i_sockfd;char 	c_msg[BUFSIZE];int main(int argc, char ** argv) {	initialize();	while(1) {		recieveMsg(c_msg);			processMsg(c_msg);	}	return 0;}// Inital setup for the serverint initialize() {	// Create UDP socket	i_sockfd = socket(AF_INET, SOCK_DGRAM, 0);	// Set up server address and port	myAddress.sin_family = AF_INET;	myAddress.sin_addr.s_addr = htonl(INADDR_ANY);	myAddress.sin_port = htons(SERVER_PORT);	// Bind server address and port	if (bind(i_sockfd, (struct sockaddr *)&myAddress, sizeof(myAddress)) < 0) {		perror("[ERR]: bind failed");		return 1;	}	return 0;}// Server processes a given messagevoid processMsg(char * msg) {	// TODO (ktngo): Bad practice. Move away from using structs	// and serialize messages.	struct packet *p = (struct packet *) msg;		printf("eventId: %d\n", p->eventId);	// Task Deliberation	switch (p -> eventId) {		case 1:			// Init event			struct initResponsePacket response;			response.eventId = 2;			response.givenPlayerId = 7;				// Send Message			sendMsg((char *) &response, sizeof(response));					printf("[SERVER]: Init Response sent\n");			break;		case 2:			break;		default:			// Echo the message			char buf[BUFSIZE];			memset(buf, 0, BUFSIZE);			sprintf(buf, "I'm server, I received your %s", msg);			// Send Message			sendMsg(buf, BUFSIZE);			break;	}}// Server recieves a messageint recieveMsg(char * msg) {	socklen_t len = sizeof(clientAddress);	if (recvfrom(i_sockfd, msg, BUFSIZE, 0, (struct sockaddr *) &clientAddress, &len) < 0) {		perror("[ERR]: server.cpp - recvfrom failed");		return 1;	}	return 0;}// Server sends a message to the current clientint sendMsg(char * msg, int length) {	if (sendto(i_sockfd, msg, length, 0, (struct sockaddr *) &clientAddress, sizeof(clientAddress)) < 0) {		perror("[ERR]: server.cpp - sendto failed");		return 1;	}	return 0;}